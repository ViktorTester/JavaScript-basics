                                        // Операторы


// Над числами можно производить математические операции с помощью операторов.
// Операторы — это символы или ключевые слова, которые выполняют операции над операндами.
// Операнд — это значения, над которыми выполняются операции.

// В выражении "3+5": числа 3 и 5 являются операндами, а знак + является оператором.

// Любая операция «возвращает» нам результат этой операции.
// Например, операция 2 + 2 возвращает результат 4.

// На данном этапе нужно знать следующие математические операторы:
// -Сложение +,
// -Вычитание -,
// -Умножение *,
// -Деление /,
// -Присваивание =,
// -Скобки(),
// -Возведение в степень **:

let x = 2 ** 3; // 2 возводится в степень 3
console.log(x); // Выводит: 8

// Взятие остатка от деления %:
console.log(19 % 5); // Выводит значение 4
console.log(10 % 3); // Выводит значение 1
console.log(2 % 3); // Выводит значение 2


                                        // Конкатенация строк


// Конкатенация — это процесс объединения или склеивания строк в программировании.
// В результате конкатенации мы получаем новую строку, состоящую из объединенных строк.

// Для конкатенации строк используется оператор +.
console.log("инь" + "ян"); // Выведет: "иньян"
//
let s = "12" + "15"
console.log(s); // Выведет: "1215"


                                        // Слабая типизация


// Если хотя бы один операнд является строкой, то второй будет автоматически
// преобразован в строку. Это делает Javascript языком со слабой типизацией,
// то есть языком, допускающим неявное преобразование типов.

// Язык JavaScript имеет динамическую слабую типизацию.
// Пример:
console.log( '1' + 2 ); // "12"

console.log( 2 + '1' ); // "21"

// Поэтому важно явно преобразовать строковые данные,
// полученные с помощью prompt() в число с помощью Number()

// Еще пример:
let age = 30;
let message = "Мой возраст: " + age; // значение age преобразуется в строку

console.log(message); // Выведет: "Мой возраст: 30"

// Эта особенность свойственна только оператору +. Другие арифметические операторы
// работают только с числами и всегда преобразуют операнды в числа.


                                        // Приоритет операторов


// Если в выражении присутствуют несколько операторов, то операторы с
// более высоким приоритетом будут выполнены первыми.

// Приоритет операторов от наибольшего к наименьшему:
// -Скобки (): Выражения, заключенные в скобки выполняются первыми.
// -Возведение в степень **
// -Умножение *, деление / и остаток от деления % имеют одинаковый приоритет и выполняются слева направо.
// -Сложение + и вычитание - имеют одинаковый приоритет и выполняются слева направо.
// -Присваивание =.

// Пример:
const result = 5 + 2 ** 3 / 2 * (10 - 5);

console.log(result); // Выведет: 25
// -Сначала выполняется операция (10 – 5), которая равна 5.
// -Затем выполняется операция 2 ** 3, которая равна 8 (2 возводим в степень 3).
// -После этого происходит деление 8 / 2, что дает результат 4.
// -Далее умножение 4 * 5, которое равно 20.
// -Сложение 5 + 20, что дает итоговый результат 25.
// -Присваивание результата переменной result

// Оператор присваивания = имеет низкий приоритет, поэтому, когда переменной что-либо
// присваивают, например, у = 2 + 2, то сначала выполнится арифметика,
// а уже затем произойдёт присваивание = с сохранением результата в у.