                                        // slice


// Метод slice возвращает новый массив, содержащий выбранные элементы из исходного массива.
// Он не изменяет исходный массив, а просто создает его копию или вырезает нужные элементы.
// slice принимает два аргумента: начальный и конечный индексы (не включая конечный элемент).

const fruits = ["apple", "banana", "orange", "grape", "kiwi"];
const citrusFruits = fruits.slice(2, 4);


console.log(citrusFruits); // Выведет ["orange", "grape"]
console.log(fruits); // Исходный массив остается неизменным

// Если второй аргумент не указан, метод вернет копию массива с указанного индекса до конца.

const fruits = ["apple", "banana", "orange", "grape", "kiwi"];
const slicedFruits = fruits.slice(2);

console.log(slicedFruits); // Выведет ["orange", "grape", "kiwi"]


                                        // concat


// Метод concat в JavaScript используется для объединения двух или более массивов в
// один новый массив. Он не изменяет исходные массивы, а возвращает новый массив,
// содержащий элементы всех переданных массивов.

const array1 = [1, 2, 3];
const array2 = [4, 5, 6];
const array3 = [7, 8, 9];

// Объединяем все три массива в один новый массив
const newArray = array1.concat(array2, array3);

console.log(newArray); // Выведет [1, 2, 3, 4, 5, 6, 7, 8, 9]

// Метод concat также может использоваться для объединения массива с одиночными элементами:
const array = [1, 2, 3];
const newItem = 4;

// Объединяем массив и элемент в один новый массив
const newArray = array.concat(newItem);

console.log(newArray); // Выведет [1, 2, 3, 4]


                                        // split/join


// Иногда мы получаем список определенных данных в виде строки, однако работать
// гораздо удобнее с массивом. Чтобы преобразовать строку в массив и наоборот,
// используются методы split/join.

// split используется для разделения строки на подстроки и создания массива на
// основе этих подстрок. Он принимает один аргумент - разделитель, по которому
// будет производиться разделение строки. Разделитель указывается в виде строки.
// Метод возвращает новый массив, состоящий из подстрок, полученных после разделения исходной строки.

// Пример:
const fruitsString = "яблоко, банан, груша, киви";
const fruitsArray = fruitsString.split(", "); // Разделяем по запятой и пробелу
console.log(fruitsArray); // Выведет ["яблоко", "банан", "груша", "киви"]

const sentence = "Привет";
const lettersArray = sentence.split(""); // Разделяем каждую букву
console.log(lettersArray); // Выведет ["П", "р", "и", "в", "е", "т"];

// join используется для объединения элементов массива в строку с помощью заданного разделителя.
// Он принимает один аргумент - разделитель, который будет использоваться для объединения
// элементов массива в строку. Разделитель указывается в виде строки.
// Метод возвращает новую строку, состоящую из элементов массива, объединенных разделителем.

// Пример использования join:

const fruitsArray = ["яблоко", "банан", "груша", "киви"];
const fruitsString = fruitsArray.join("-"); // Объединяем с дефисом
console.log(fruitsString); // Выведет "яблоко-банан-груша-киви"


const lettersArray = ["П", "р", "и", "в", "е", "т"];
const sentence = lettersArray.join(""); // Объединяем без разделителя
console.log(sentence); // Выведет "Привет"