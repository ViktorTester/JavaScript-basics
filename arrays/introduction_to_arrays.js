                                            // Массивы


// Массив (Array) – это, как и объект, составной тип данных. Массивы позволяют хранить
// упорядоченный набор элементов в одной переменной. Элементы в массиве могут быть разных
// типов данных (числа, строки, объекты или даже другие массивы).

// Массив – ссылочный тип данных, то есть копируется по ссылке, как и объект.

// Каждый элемент в массиве, подобно символу в строке, имеет свой порядковый номер,
// который называется индексом. Индексы начинаются с нуля, что означает, что первый
// элемент имеет индекс 0, второй элемент - индекс 1 и так далее.

// Индексы массива — это числовые значения, которые присвоены каждому элементу в массиве.

// Пример создания массива:
const  emptyArray = []; // пустой массив
const fruits = ["apple", "banana", "orange", "grape"]; // непустой массив

// В данном примере fruits — это массив, который содержит четыре
// элемента: "apple", "banana", "orange" и "grape".
// Индексы элементов соответственно: 0, 1, 2 и 3.

// В массиве могут храниться элементы любого типа данных.
const mixedArray = [1, "блаженство", true, { key: "value" }, null];
console.log(mixedArray); // Выведет: [1, "блаженство", true, { key: "value" }, null]

// Для доступа к элементам массива используются квадратные скобки с указанием индекса:
const fruits = ["apple", "banana", "orange", "grape"];

console.log(fruits[0]); // Выведет: "apple"
console.log(fruits[2]); // Выведет: "orange"
console.log(fruits[45]); // Выведет undefined

// Изменение элементов в массиве:
const numbers = [1, 2, 3, 4, 5];
numbers[2] = 10; // Изменяем значение третьего элемента на 10
console.log(numbers); // Выведет: [1, 2, 10, 4, 5]

// Длина массива:
const animals = ["dog", "cat", "rabbit", "elephant"];
console.log(animals.length); // Выведет: 4, так как в массиве 4 элемента


                                        // Добавление и удаление элементов


// Мы добавляем и удаляем элементы массива с помощью методов,
// при этом есть методы, работающие как с концом, так и с началом массива.

//      Методы, работающие с началом массива:

// Метод shift: Удаляет первый элемент из массива и возвращает его.
const colors = ["red", "green", "blue"];
const firstColor = colors.shift();
// Удаляем первый элемент ("red") и сохраняем его в переменной firstColor

console.log(colors); // Выведет: ["green", "blue"], первый элемент ("red") удален
console.log(firstColor); // Выведет: "red", удаленный элемент сохранен в переменной firstColor


// Метод unshift: Добавляет один или несколько элементов в начало массива.
const animals = ["dog", "cat"];
animals.unshift("rabbit", "elephant");
// Добавляем элементы "rabbit" и "elephant" в начало массива
console.log(animals); // Выведет: ["rabbit", "elephant", "dog", "cat"]

//      Методы, работающие с концом массива:

// Метод push: Добавляет один или несколько элементов в конец массива.
const fruits = ["apple", "banana"];
fruits.push("orange", "grape"); // Добавляем элементы "orange" и "grape" в конец массива
console.log(fruits); // Выведет: ["apple", "banana", "orange", "grape"]

// Метод pop: удаляет последний элемент из массива и возвращает его:
const numbers = [1, 2, 3, 4, 5];
const lastNumber = numbers.pop();
// Удаляем последний элемент (5) и сохраняем его в переменной lastNumber

console.log(numbers); // Выведет: [1, 2, 3, 4], последний элемент (5) удален
console.log(lastNumber); // Выведет: 5, удаленный элемент сохранен в переменной lastNumber


                                        // Цикл for…of


// Конструкция for…of позволяет последовательно перебирать значения элементов без
// необходимости использования индексов, что делает код более читабельным.

// Перебор элементов массива:
const fruits = ["apple", "banana", "orange"];

for (const fruit of fruits) {
  console.log(fruit);
}
// Вывод:

// apple
// banana
// orange

// Другой пример:
let colors = ["красный", "зеленый", "синий"];

for (let color of colors) {
  console.log("Цвет:", color);
}
// Вывод:

// Цвет: красный
// Цвет: зеленый
// Цвет: синий

// Удобство цикла for..of в том, что нет необходимости использовать индексы.
