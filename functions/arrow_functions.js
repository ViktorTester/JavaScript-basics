                                        // Стрелочные функции


// Стрелочные функции – это более компактный и краткий синтаксис для определения функций в JavaScript.

// Традиционная функция:
function addNumbers(a, b) {
  return a + b;
}
// Стрелочная функция:
let addNumbers = (a, b) => a + b;

// В стрелочной функции мы опускаем ключевое слово function и используем стрелочку =>
// между списком параметров и телом функции. Если функция состоит из одной операции,
// можно опустить фигурные скобки и return (если функция возвращает результат), как в примере выше.

// Если параметр один, можно опустить круглые скобки:
let addNumbers = a => a + 2;

console.log(addNumbers(3)); // 5

// Если параметров нет, круглые скобки будут пустыми, но они должны присутствовать. Пример:
let greet = () => console.log("Все понятно");

// Многострочные стрелочные функции будут выглядеть так:
let addNumbers = (a, b) => {
  let result = a + b;
  return result; // если мы используем фигурные скобки, то нам нужно указать "return"
};

console.log( addNumbers(1, 2) ); // 3


                                                // Функциональные выражения


// Объявление функции и функциональные выражения представляют два
// разных способа создания функций в JavaScript.

// 1. Объявление функции, уже известное нам
function greet(name) {
  console.log("Привет, " + name + "!");
}

// 2. Использование функционального выражения
let greet = function(name) {
  console.log("Привет, " + name + "!");
};

greet('Василий'); // Выведет "Привет, Василий!"

// В этом случае функция создается без имени (анонимная функция) и затем присваивается
// переменной, через которую мы можем вызывать эту функцию.


                                        // Отличие


// Важное отличие между этими двумя способами заключается во времени,
// когда функция становится доступной для вызова.

// При использовании объявления функции (с ключевым словом function) функция
// доступна в любом месте кода до и после её фактического объявления.
// Напомню, что это связано с тем, что Javascript инициализирует функции,
// созданные этим способом, до выполнения кода.

// В случае функционального выражения, функцию можно вызывать только после того,
// как она была присвоена переменной. Так как, функции, созданные этим способом,
// создаются тогда, когда выполнение доходит до них.

greet("Олег"); // Вызов функции до функционального выражения НЕдопустим
let greet = function(name) {
  console.log("Привет, " + name + "!");
};