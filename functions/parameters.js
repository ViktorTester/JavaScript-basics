                                        // Параметры функций


// Параметры функций — это специальные переменные, которые вы можете объявить
// внутри определения функции для того, чтобы передавать в неё данные при её вызове.

// Значения этих переменных используются внутри функции для выполнения определенных действий.
// Параметры записываются внутри круглых скобок при объявлении функции через запятую.

// -Параметр – это переменная, указанная в круглых скобках в объявлении функции.
// -Аргумент – это значение, которое передаётся функции при её вызове.

// Пример:
function calculateSum(a, b) { // a, b - параметры
  console.log(a + b)
}

calculateSum(5, 10); // вызов функции с аргументами 5 и 10, в консоль выведется 15
calculateSum(20, 7);  // вызов функции с аргументами 20 и 7, в консоль выведется 27

// В этом примере функция calculateSum принимает два параметра a и b.
// Функция выводит результат сложения.

// Когда мы вызываем функцию, переданные значения копируются в
// переменные a и b. Затем они используются в теле функции.

// Мы вызываем функцию дважды с разными аргументами: calculateSum(5, 10) и calculateSum(20, 7).
// Первый вызов вернет результат 15 (потому что 5 + 10 = 15),
// а второй вызов вернет результат 27 (потому что 20 + 7 = 27).

// Вызвать функцию можно и до объявления функции. Это связано с тем,
// что Javascript инициализирует функции до выполнения кода:

calculateSum(5, 10);

function calculateSum(a, b) {
  console.log(a + b);
}

// Аргументом при вызове функции может быть значение переменной:

// Запрос данных у пользователя
let pricePerUnit = Number(prompt("Введите цену товара:"));
let quantity = Number(prompt("Введите количество единиц товара:"));

// Передаем полученные от пользователя данные в качестве аргументов в функцию calculateCost
calculateCost(pricePerUnit, quantity);

// Объявление функции calculateCost с параметрами price и quantity
function calculateCost(price, quantity) {
  let totalCost = price * quantity;
  console.log("Общая стоимость покупки:", totalCost);
}


                                        // Значение по умолчанию


// Что если объявить функцию с параметром, но при вызове не передать аргумент?
// Если при вызове функции аргумент не был указан, то его значением становится undefined.
// Чтобы этого избежать, можно добавить для параметров значения по умолчанию.

// Простыми словами, значение по умолчанию — это некий "резервный план" для функции,
// чтобы она могла продолжить работу, даже если некоторые аргументы не были переданы ей.

// Если мы хотим задать параметру name значение по умолчанию, мы должны указать его после =
function greet(name = "Гость") {
  console.log("Привет, " + name);
}

greet(); // Привет, Гость
greet("Алиса"); // Привет, Алиса
greet("Евгений"); // Привет, Евгений

// В этом примере у функции greet есть один параметр name, который имеет значение по
// умолчанию "Гость". Если мы вызываем функцию greet() без аргумента, она будет
// использовать значение по умолчанию и выведет "Привет, Гость". Если мы вызываем
// функцию greet("Алиса") с аргументом "Алиса", она будет использовать
// переданное значение и выведет "Привет, Алиса".

// Еще один пример:
function calculateTotal(price, quantity = 1) {
  console.log(price * quantity);
}


// Вызов функции с указанием количества товара
calculateTotal(10, 5); // Выведет 50 (10 * 5)

// Вызов функции без указания количества товара (используется значение по умолчанию)
calculateTotal(20); // Выведет 20 (20 * 1)

// В этом примере, функция calculateTotal принимает два параметра: price и quantity.
// Параметр quantity имеет значение по умолчанию равное 1. Если мы вызываем функцию
// и передаем только один аргумент (цену товара), то она автоматически использует
// значение по умолчанию для quantity, что позволяет нам рассчитать
// общую стоимость товара, предполагая, что количество равно 1.