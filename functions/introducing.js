                                        // Создание функций


// Функция в JavaScript - это фрагмент кода, к которому можно обратиться в любом месте программы.

// Функции используются для группировки кода, который выполняет определенную задачу
// и предоставляют возможность многократного использования этого кода.

// Простыми словами, функция — это некий "инструмент", который вы создаете сами,
// чтобы сделать определенную вещь. Вы даете этому инструменту имя,
// и она выполняет задачу, когда вы вызываете это имя.

// Синтаксис создания или "объявления" функций:
function имя(список параметров) {

тело функции

}

// Круглые скобки должны обязательно идти вслед за именем функции, даже если
// в них отсутствуют параметры. Параметры будут рассмотрены в следующем уроке.

// После объявления функция может быть вызвана по своему имени.
// Круглые скобки также обязательны. Формат вызова функции:

// имя_функции();

// Пример создания и вызова функции на JavaScript:
// Создание функции
function greetUser() {

  console.log("Привет, пользователь");

}

// Вызов функции

greetUser(); // круглые скобки обязательны при вызове

// В этом примере мы создали функцию с именем greetUser. Когда мы вызываем greetUser(),
// функция greetUser выполняет код внутри нее и выводит в консоль сообщение "Привет, пользователь".

// Не забывайте про круглые скобки при вызове, это частая ошибка начинающих.

// Удобство функций заключается в повторном использовании кода:

greetUser();
greetUser();
greetUser();

// Таким образом, мы трижды вывели сообщение, однако код
// console.log("Привет, пользователь"); пришлось писать всего один раз.

// В теле функции могут быть условные выражения и циклы. Пример:
// функция вычисляет и выводит сумму чисел от 1 до 5

function calculateSum() {

  let sum = 0;

  for (let i = 1; i <= 5; i++) {

    sum += i;

  }

  console.log(sum);

}

// Функции должны быть короткими и выполнять только одно действие. Если действий много,
// лучше разбить функцию на несколько меньших, что улучшит читаемость кода.

// Создание функций упрощает код, делает его более структурированным и позволяет
// использовать один и тот же код многократно, избегая повторений.
// Они являются основным строительным блоком программирования и
// позволяют создавать более сложные программы, разделяя
// их на более мелкие, понятные и легко управляемые части.


                                        // Выбор имени функции


// Советы по правильному именованию функций:

// -Имя функции должно отражать действие, которое она выполняет.
// -Привыкайте давать функциям имена, которые начинаются с глагола.
// Это поможет понять, что функция выполняет некоторое действие.
// -Используйте camelCase


                                        // Локальные и глобальные переменные


// Локальные и глобальные переменные в функциях — это два типа переменных,
// которые имеют различную область видимости в программе.

// Область видимости — концепция, определяющая доступность
// переменных в различных местах программы.


                                        // Локальные переменные


// Локальные переменные объявляются внутри тела функции и доступны только
// внутри этой функции. Это означает, что другие части программы за пределами
// функции не могут видеть или использовать эти переменные. Локальные переменные
// создаются при вызове функции и уничтожаются, когда функция завершает свою работу.

// Пример:
function showMessage() {
  let message = "kys"; // Локальная переменная
}
console.log(message); // Ошибка: message is not defined

// Попытка доступа к локальной переменной за пределами функции
// (за пределами фигурных скобок) вызовет ошибку.

// Пример правильной работы с локальными переменными:
function showMessage() {
  let message = "kys" // Локальная переменная
  console.log(message);

}
showMessage(); // Выведет ‘kys’


                                        // Глобальные переменные (внешние переменные)


// Глобальные (внешние) переменные объявляются вне всех функций, обычно в глобальной
// области видимости программы. Это означает, что эти переменные доступны и видны
// во всем коде, включая все функции, которые могут быть определены в программе.

// Пример:
let globalVar = "глобальная переменная";

function showGlobalVar() {
  console.log(globalVar); // Внешняя переменная доступна внутри функции
}
showGlobalVar(); // Выведет "глобальная переменная"
console.log(globalVar); // Выведет "глобальная переменная"

// Обратите внимание, что глобальные переменные могут быть изменены внутри функций,
// и это может повлиять на их значение в других частях программы.

// Пример:
let globalVar = "Привет";

function changeGlobalVar() {
  globalVar = "Изменено"; // Меняем значение глобальной переменной внутри функции
}

console.log(globalVar); // Выведет "Привет"
changeGlobalVar(); // Вызов функции, переменной globalVar присвоено новое значение
console.log(globalVar); // Выведет "Изменено"


                                        // Совет


// Важно соблюдать осторожность при использовании глобальных переменных,
// поскольку их чрезмерное использование может сделать код менее
// структурированным и усложнить его понимание.

// Чаще всего рекомендуется использовать локальные переменные, если они необходимы
// только внутри функции, и использовать глобальные переменные тогда,
// когда данные действительно требуются для общего доступа в различных частях программы.