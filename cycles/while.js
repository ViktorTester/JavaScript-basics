                                        // Циклы


// Иногда в коде необходимо сделать однотипное действие много раз.
// Например, вывести все числа от 1 до 100.

// Циклы позволяют автоматически "повторять" код, пока заданное нами условие истинно.
// Когда условие становится ложным, цикл прекращает свою работу.

// Каждое повторение кода внутри циклa называется "итерацией".

// Итерация – это однократное выполнение кода внутри цикла.


                                        // While


// Цикл while (по-русски «в то время, как» или «пока») в JavaScript — это управляющая
// конструкция, позволяющая выполнять блок кода, пока определенное условие истинно (true).

// Принцип работы конструкции while:

// 1. Мы задаем условие в круглых скобках после while:

while(условие) {
 // тело цикла
}
// 2. Когда цикл начинает выполняться, он проверяет условие. Если условие истинно,
// код внутри цикла (т.е. внутри фигурных скобок) выполняется.

// 3. После выполнения блока кода цикл снова проверяет условие.

// 4. Если условие по-прежнему истинно, код внутри цикла выполняется снова.
// И так происходит до тех пор, пока условие не станет ложным.

// 5. Когда условие становится ложным, выполнение цикла прекращается.


// Разберём пример подробно:
let count = 1;

while (count <= 3) {
  console.log("Это итерация номер", count);
  count = count + 1; // увеличиваем значение count на 1
}
// 1. Создаем переменную count и присваиваем ей значение 1.
// 2. Проверяем условие count <= 3. Так как count равен 1, условие истинно, мы заходим внутрь цикла.
// 3. Выводим сообщение "Это итерация номер 1". В данной итерации count равен 1.
// 4. Увеличиваем значение count на 1 с помощью count = count + 1. Теперь count становится равным 2.
// 5. Возвращаемся к началу цикла. Проверяем условие count <= 3. Так как count теперь равен 2,
// условие истинно (2 меньше или равно 3), и мы снова входим в цикл.
// 6. Выводим сообщение "Это итерация номер 2". В данной итерации count равен 2.
// 7. Увеличиваем значение count на 1 с помощью count = count + 1. Теперь count становится равным 3.
// 8. Возвращаемся к началу цикла. Проверяем условие count <= 3. Так как count теперь равен 3, условие истинно, и мы продолжаем выполнять цикл.
// 9. Выводим сообщение "Это итерация номер 3". В данной итерации count равен 3.
// 10. Увеличиваем значение count на 1 с помощью count = count + 1. Теперь count становится равным 4.
// 11. Возвращаемся к началу цикла, но теперь условие count <= 3 ложно, так как count равен 4, и цикл завершается.
// 12. Выходим из цикла, и программа продолжает выполнять код после цикла.

// Вывод будет следующим:
// Это итерация номер 1
// Это итерация номер 2
// Это итерация номер 3


                                        // Условная конструкция внутри цикла


// Внутри цикла также может быть условная конструкция. Пример:
let counter = 1;

while (counter <= 5) {
  if (counter % 2 === 0) {
    console.log(counter + " - четное число");
  } else {
    console.log(counter + " - нечетное число");
  }

  counter = counter + 1;
}
// Вывод будет следующим:
// 1 - нечетное число
// 2 - четное число
// 3 - нечетное число
// 4 - четное число
// 5 - нечетное число


                                        // Арифметические операторы с присваиванием


// Нам часто нужно будет применить оператор к переменной и сохранить результат в ней же.
// Например:
let x = 1;

x = x + 9; // 1 + 9 = 10, переменной х присваиваем 10
x = x / 5; // 10 / 5 = 2
console.log(x) // Вывод 2

// У оператора = приоритет меньше, чем у +, поэтому сперва выполняется выражение х + 9,
// а затем результат выражения присваивается переменной х. Аналогично с выражением x = x / 5

// Эту запись можно укоротить при помощи совмещённых операторов += и /=:
let x = 2;

x += 9;
x /= 5;
console.log(x)

// Подобные краткие формы записи существуют для всех арифметических операторов: *=, -= и так далее.

// Таким образом, цикл из предыдущего шага можно записать так:
let count = 1;

while (count <= 3) {
  console.log("Это итерация номер", count);
  count += 1; // увеличиваем значение count на 1 и присваиваем переменной count
}
// Если мы хотим увеличить шаг, мы можем записать count += 2, count += 3 и т.д.


                                        // Унарные операторы ++ и --


// Зачастую в циклах используются унарный оператор ++ или оператор инкремента.
// Он увеличивает значение переменной на 1. Код выше можно записать еще и так:

let count = 1;

while (count <= 3) {
  console.log("Это итерация номер", count);
  count++; // увеличиваем значение count на 1
}
// Запись count++ это то же, что и count += 1.

// Существует унарный оператор -- или оператор декремента.
// Он уменьшает значения числовой переменной на 1.

// Пример:
let count = 5;

while (count > 0) {
    console.log("Осталось: " + count);
    count--; // уменьшаем значение count на 1
}

console.log("Цикл завершен");

// Вывод будет следующим:
// Осталось: 5
// Осталось: 4
// Осталось: 3
// Осталось: 2
// Осталось: 1
// Цикл завершен.