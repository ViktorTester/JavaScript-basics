                                        // Интерполяция


// Интерполяция — это способ вставки значений переменных или выражений внутрь строки.
// Вместо того чтобы использовать конкатенацию строк с помощью оператора +, как в примере ниже:

const name = "Петр";
const greeting = "Будь внимательным, " + name + "!!!";

console.log(greeting);// Результат: "Будь внимательным, Петр!!!"

// Мы используем обратные кавычки (` `) для создания интерполированной строки,
// а переменные или выражения оборачиваем в конструкцию ${...}:

const name = "Петр";
const greeting = `Будь внимательным, ${name}!!!`;

console.log(greeting);// Результат: "Будь внимательным, Петр!!!"

// Когда JavaScript видит конструкцию ${...}, он вычисляет значение переменной
// или выражения, указанного внутри, и вставляет его в строку. Внутри этой
// конструкции могут быть также условные выражения,
// вызовы функций и обращения к свойствам объектов. Пример:

const person = {
  firstName: "Алекс",
  age: 30,
};

function doubleAge(age) {
  return age * 2;
}

const greeting = `Привет, меня зовут ${person.firstName + "ей"} и мне ${doubleAge(person.age)} лет`;

console.log(greeting);
// Вывод: "Привет, меня зовут Алексей и мне 60 лет"

// Интерполяция делает код более читаемым и удобным для работы с динамическими значениями внутри строк.


                                        // Спецсимволы


// Когда встает задача вывести кавычки, у вас могут возникнуть сложности:

console.log(" " ");  // Выведет ошибку

console.log(' ' ');  // Выведет ошибку

// Чтобы выполнить эту задачу, необходимо использовать спецсимвол \ (обратный слэш).

// Пример:
console.log('Это одиночная кавычка: \''); // Выведет: Это одиночная кавычка: '
console.log("Это двойная кавычка: \""); // Выведет: Это двойная кавычка: "

// Другим вариантом будет использование уже изученной интерполяции:
console.log(`Это двойная кавычка: "`)

// Что если нужно вывести обратный слэш? Необходимо поставить спецсимвол перед обратным слэшем: \\

// Пример:
console.log("Это обратный слэш: \\"); // Выведет: Это обратный слэш: \


                                        // Экранирующие последовательности


// Экранирующие последовательности — это специальные комбинации символов в строках,
// которые используются для записи сложных или управляющих символов.
// Экранирование выполняется с помощью обратного слэша \

// Экранирующие последовательности позволяют переходить на новую строку с
// помощью \n, без необходимости несколько раз писать console.log(). Пример:

// console.log("Это перевод строки:\nТекст на новой строке.");
// Вывод будет следующим:
// Это перевод строки:
// Текст на новой строке.

// Еще одна экранирующая последовательность: \t, которая используется для
// вставки символа горизонтальной табуляции в строку. Пример:

console.log("Это\tотступ\tсимволами\tтабуляции.");
// Вывод будет следующим:
// Это    отступ    символами    табуляции